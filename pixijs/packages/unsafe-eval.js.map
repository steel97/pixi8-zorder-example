{"version":3,"file":"unsafe-eval.js","sources":["../../src/unsafe-eval/generateUniformBufferSyncPolyfill.ts","../../src/unsafe-eval/generateUniformsSyncPolyfill.ts","../../src/unsafe-eval/init.ts"],"sourcesContent":["import { type UBOElement, WGSL_TO_STD40_SIZE } from '../rendering/renderers/shared/shader/utils/createUBOElements';\nimport { UBO_TO_SINGLE_SETTERS_FN } from '../rendering/renderers/shared/shader/utils/createUniformBufferSyncTypes';\nimport { uniformBufferParsers } from '../rendering/renderers/shared/shader/utils/uniformBufferParsers';\n\nimport type {\n    UBO_TYPE,\n    UniformsSyncCallback\n} from '../rendering/renderers/shared/shader/utils/createUniformBufferSyncTypes';\n\nexport function generateUniformBufferSyncPolyfill(\n    uboElements: UBOElement[],\n): UniformsSyncCallback\n{\n    return ((uv: any, data: any, o: any) =>\n    {\n        let v = null;\n        let t = 0;\n\n        let prev = 0;\n\n        for (let i = 0; i < uboElements.length; i++)\n        {\n            const uboElement = uboElements[i];\n\n            const name = uboElement.data.name;\n\n            let executed = false;\n            let offset = 0;\n\n            for (let j = 0; j < uniformBufferParsers.length; j++)\n            {\n                const uniformParser = uniformBufferParsers[j];\n\n                if (uniformParser.test(uboElement.data))\n                {\n                    offset = uboElement.offset / 4;\n\n                    o += offset - prev;\n\n                    uniformBufferParsers[j].exec(name, uv, data, o, v);\n\n                    executed = true;\n\n                    break;\n                }\n            }\n\n            if (!executed)\n            {\n                if (uboElement.data.size > 1)\n                {\n                    const rowSize = Math.max(WGSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);\n                    const elementSize = (uboElement.data.value as Array<number>).length / uboElement.data.size;\n\n                    const remainder = (4 - (elementSize % 4)) % 4;\n\n                    offset = uboElement.offset / 4;\n\n                    v = uv[name];\n                    o += offset - prev;\n\n                    let arrayOffset = o;\n\n                    t = 0;\n\n                    for (let i = 0; i < uboElement.data.size * rowSize; i++)\n                    {\n                        for (let j = 0; j < elementSize; j++)\n                        {\n                            data[arrayOffset++] = v[t++];\n                        }\n                        if (remainder !== 0)\n                        {\n                            arrayOffset += remainder;\n                        }\n                    }\n                }\n                else\n                {\n                    const template = UBO_TO_SINGLE_SETTERS_FN[uboElement.data.type as UBO_TYPE];\n\n                    offset = uboElement.offset / 4;\n\n                    v = uv[name];\n                    o += offset - prev;\n                    template(data, o, v);\n                }\n            }\n\n            prev = offset;\n        }\n    }) as UniformsSyncCallback;\n}\n","import {\n    GLSL_TO_ARRAY_SETTERS_FN,\n    GLSL_TO_SINGLE_SETTERS_FN_CACHED\n} from '../rendering/renderers/gl/shader/program/generateUniformsSyncTypes';\nimport { uniformParsers } from '../rendering/renderers/gl/shader/program/uniformParsers';\nimport { BufferResource } from '../rendering/renderers/shared/buffer/BufferResource';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup';\n\nimport type { GlUniformData } from '../rendering/renderers/gl/shader/GlProgram';\nimport type { GLSL_TYPE } from '../rendering/renderers/gl/shader/program/generateUniformsSyncTypes';\nimport type { UniformsSyncCallback } from '../rendering/renderers/shared/shader/utils/createUniformBufferSyncTypes';\n\nexport function generateUniformsSyncPolyfill(\n    group: UniformGroup,\n    uniformData: Record<string, GlUniformData>\n): UniformsSyncCallback\n{\n    return ((ud: any, uv: any, renderer: any, syncData: any) =>\n    {\n        let v = null;\n        let cv = null;\n        let cu = null;\n        const t = 0;\n        const gl = renderer.gl;\n\n        for (const i in group.uniforms)\n        {\n            const data = uniformData[i];\n\n            if (!data)\n            {\n                if (group.uniforms[i] instanceof UniformGroup)\n                {\n                    if ((group.uniforms[i] as UniformGroup).ubo)\n                    {\n                        renderer.shader.bindUniformBlock(uv[i], i);\n                    }\n                    else\n                    {\n                        renderer.shader.updateUniformGroup(uv[i]);\n                    }\n                }\n                else if (group.uniforms[i] instanceof BufferResource)\n                {\n                    renderer.shader.bindBufferResource(uv[i], i);\n                }\n\n                continue;\n            }\n\n            const uniform = group.uniforms[i];\n\n            let executed = false;\n\n            for (let j = 0; j < uniformParsers.length; j++)\n            {\n                if (uniformParsers[j].test(data, uniform))\n                {\n                    uniformParsers[j].exec(i, cv, ud, uv, v, t, gl, renderer, syncData);\n                    executed = true;\n\n                    break;\n                }\n            }\n\n            if (!executed)\n            {\n                cu = ud[i];\n                cv = cu.value;\n                v = uv[i];\n\n                const isSingleSetter = data.size === 1 && !data.isArray;\n\n                if (isSingleSetter)\n                {\n                    GLSL_TO_SINGLE_SETTERS_FN_CACHED[data.type as GLSL_TYPE](cu, cv, v, ud[i].location, gl);\n                }\n                else\n                {\n                    GLSL_TO_ARRAY_SETTERS_FN[data.type as GLSL_TYPE](v, ud[i].location, gl);\n                }\n\n                cu = ud[i];\n                cv = cu.value;\n                v = uv[i];\n            }\n        }\n    }) as UniformsSyncCallback;\n}\n\n","import { GlUniformGroupSystem } from '../rendering/renderers/gl/shader/GlUniformGroupSystem';\nimport { UniformBufferSystem } from '../rendering/renderers/shared/shader/UniformBufferSystem';\nimport { generateUniformBufferSyncPolyfill } from './generateUniformBufferSyncPolyfill';\nimport { generateUniformsSyncPolyfill } from './generateUniformsSyncPolyfill';\n\nfunction selfInstall()\n{\n    Object.assign(GlUniformGroupSystem.prototype,\n        {\n            _systemCheck()\n            {\n                // Do nothing, don't throw error\n            },\n\n            // use polyfill which avoids eval method\n            _generateUniformsSync: generateUniformsSyncPolyfill,\n        }\n    );\n\n    Object.assign(UniformBufferSystem.prototype,\n        {\n            _systemCheck()\n            {\n                // Do nothing, don't throw error\n            },\n\n            // use polyfill which avoids eval method\n            _generateUniformBufferSync: generateUniformBufferSyncPolyfill,\n        }\n    );\n}\n\nselfInstall();\n"],"names":[],"mappings":"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"}